KMD
00000000:             ; ; COMP15111 lab 4 - Template file
00000000:             ; 
00000000:             ; print_char      equ     0               ; Define names to aid readability
00000000:             ; stop            equ     2
00000000:             ; print_str       equ     3
00000000:             ; print_no        equ     4
00000000:             ; 
00000000:             ; cLF                     equ     10              ; Line-feed character
00000000:             ; 
00000000:             ; 
00000000: E28FD064    ;                 ADR     SP, _stack      ; set SP pointing to the end of our stack
00000004: EA00008A    ;                 B       main
00000008:             ; 
00000008:             ;                 DEFS    100             ; this chunk of memory is for the stack
0000006C:             ; _stack                                  ; This label is 'just after' the stack space
0000006C:             ; 
0000006C:             ; 
0000006C: 54 68 69 73 ; wasborn         DEFB    "This person was born on ",0
00000070: 20 70 65 72 ; 
00000074: 73 6F 6E 20 ; 
00000078: 77 61 73 20 ; 
0000007C: 62 6F 72 6E ; 
00000080: 20 6F 6E 20 ; 
00000084: 00          ; 
00000085: 54 68 69 73 ; was                     DEFB    "This person was ",0
00000089: 20 70 65 72 ; 
0000008D: 73 6F 6E 20 ; 
00000091: 77 61 73 20 ; 
00000095: 00          ; 
00000096: 20 6F 6E 20 ; on                      DEFB    " on ",0
0000009A: 00          ; 
0000009B: 54 68 69 73 ; is                      DEFB    "This person is ",0
0000009F: 20 70 65 72 ; 
000000A3: 73 6F 6E 20 ; 
000000A7: 69 73 20 00 ; 
000000AB: 20 74 6F 64 ; today           DEFB    " today!",0
000000AF: 61 79 21 00 ; 
000000B3: 54 68 69 73 ; willbe          DEFB    "This person will be ",0
000000B7: 20 70 65 72 ; 
000000BB: 73 6F 6E 20 ; 
000000BF: 77 69 6C 6C ; 
000000C3: 20 62 65 20 ; 
000000C7: 00          ; 
000000C8:             ; 
000000C8:             ; ALIGN
000000C8:             ; 
000000C8: 00000017    ; pDay              DEFW  23              ;  pDay = 23    //or whatever is today's date
000000CC: 0000000B    ; pMonth            DEFW  11              ;  pMonth = 11  //or whatever is this month
000000D0: 000007D5    ; pYear             DEFW  2005    ;  pYear = 2005 //or whatever is this year
000000D4:             ; 
000000D4:             ; 
000000D4:             ; 
000000D4: 000007D0    ; sYear DEFW      2000
000000D8:             ; 
000000D8:             ; 
000000D8:             ; ; def printAgeHistory (bDay, bMonth, bYear)
000000D8:             ; 
000000D8:             ; ; parameters
000000D8:             ; ;  R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
000000D8:             ; ;  R1 = bMonth
000000D8:             ; ;  R2 = bYear
000000D8:             ; ; local variables (callee-saved registers)
000000D8:             ; ;  R4 = year
000000D8:             ; ;  R5 = age
000000D8:             ; ;  R6 = bDay - originally R0
000000D8:             ; 
000000D8:             ; printAgeHistory
000000D8:             ; 
000000D8: E92D4000    ;         PUSH {LR}                  ; stack LR
000000DC: E92D0070    ;         STMFD SP!, {R4-R6} ; callee saves three registers
000000E0:             ; 
000000E0:             ; ;for part 1
000000E0:             ; ;replace the PUSH instructions given above with one STMFD instruction
000000E0:             ; 
000000E0:             ;         ; Get parameters from stack
000000E0: E59D6018    ;         LDR     R6, [SP, #(4 + 2) * 4]          ; bDay
000000E4: E59D1014    ;         LDR     R1, [SP, #(4 + 1) * 4]          ; bMonth
000000E8: E59D2010    ;         LDR     R2, [SP, #(4 + 0) * 4]          ; bYear
000000EC:             ; 
000000EC:             ; ;   year = bYear + 1
000000EC: E2824001    ;         ADD     R4, R2, #1
000000F0:             ; ;   age = 1;
000000F0: E3A05001    ;         MOV     R5, #1
000000F4: E3A08001    ;     MOV R8, #1
000000F8:             ; 
000000F8:             ; ; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
000000F8: E24F0094    ;         ADRL R0, wasborn
000000FC: EF000003    ;         SVC      print_str
00000100:             ;         
00000100: E92D0046    ;         STMFD SP!, {R1, R2, R6}                 ;stack three parameters
00000104: EB000037    ;         BL printTheDate
00000108:             ;         
00000108:             ; ; this code does: while year < pYear //{
00000108:             ; loop1   
00000108: E51F0040    ;         LDR     R0, pYear       ;
0000010C: E1540000    ;         CMP     R4, R0              ; 
00000110: BA000008    ;         BLT innerloop1          ; R4(year) < R0(pyear) branch to innerloop1
00000114: 1A000014    ;         BNE end1            ; R4 != R0 to end1
00000118:             ; 
00000118:             ;         ; only R4 == R0 passed to next line 
00000118:             ; 
00000118: E51F0054    ;         LDR R0, pMonth      ;
0000011C: E1510000    ;         CMP R1, R0                  ; 
00000120: BA000004    ;         BLT innerloop1      ; R4 == R0 and R1(bMonth) < R0(pMonth) branch to innerloop1
00000124: 1A000010    ;         BNE end1            ; R4 == R0 and R1 != R0 to end1
00000128:             ; 
00000128:             ;         ; only R4 == R0 and R6 == R0 passed to next line
00000128:             ; 
00000128: E51F0068    ;         LDR R0, pDay        ;
0000012C: E1560000    ;         CMP R6, R0                  ;
00000130: BA000000    ;         BLT innerloop1      ; R4 == R0 and R6 == R0 and R6(bDay) < R0(pDay) branch to innerloop
                      ; 1
00000134: AA00000C    ;         BGE end1            ; R4 == R0 and R6 == R0 and R6(bDay) >= R0(pDay) to end1
00000138:             ; 
00000138:             ; ; for part 4, should be changed to:
00000138:             ; ; while year < pYear or (year == pYear and bMonth < pMonth) or (year == pYear and bMonth == pMo
                      ; nth and bDay < pDay)
00000138:             ; 
00000138:             ; innerloop1
00000138:             ; ;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(yea
                      ; r))
00000138: E24F00BB    ;         ADRL    R0, was
0000013C: EF000003    ;         SVC     print_str
00000140: E1A00005    ;         MOV     R0, R5
00000144: EF000004    ;         SVC     print_no
00000148: E24F00BA    ;         ADRL    R0, on
0000014C: EF000003    ;         SVC     print_str
00000150:             ; 
00000150: E92D0052    ;         STMFD SP!, {R1, R4, R6}         ;stack three parameters
00000154: EB000023    ;         BL printTheDate
00000158:             ; 
00000158:             ;         ; year = year + 1
00000158: E2844001    ;         ADD     R4, R4, #1
0000015C: E2848001    ;         ADD     R8, R4, #1
00000160: E2889001    ;         ADD     R9, R8, #1
00000164:             ;         ; age = age + 1
00000164: E2855001    ;         ADD     R5, R5, #1
00000168:             ;         ; //}
00000168: EAFFFFE6    ;         B       loop1
0000016C:             ; 
0000016C:             ; end1
0000016C:             ; ; this code does: if (bMonth == pMonth):
0000016C:             ; ; for part 4, should be changed to:
0000016C:             ; ; if (bMonth == pMonth and bDay == pDay):
0000016C:             ; 
0000016C: E51F00A8    ;                 LDR     R0, pMonth
00000170: E1510000    ;                 CMP     R1, R0
00000174: 1A00000B    ;                 BNE else1
00000178:             ; 
00000178: E51F00B8    ;                 LDR R0, pDay
0000017C: E1560000    ;                 CMP R6, R0
00000180: 1A000008    ;                 BNE else1
00000184:             ; 
00000184:             ; ; print("This person is " + str(age) + " today!")
00000184: E24F00F1    ;                 ADRL    R0, is
00000188: EF000003    ;                 SVC     print_str
0000018C: E1A00005    ;                 MOV     R0, R5
00000190: EF000004    ;                 SVC     print_no
00000194: E24F00F1    ;                 ADRL R0, today
00000198: EF000003    ;                 SVC     print_str
0000019C: E3A0000A    ;                 MOV     R0, #cLF
000001A0: EF000000    ;                 SVC     print_char
000001A4:             ; 
000001A4:             ; ; else
000001A4: EA000008    ;                 B       end2
000001A8:             ; else1
000001A8:             ; ; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(
                      ; year))
000001A8: E24F00FD    ;                 ADRL    R0, willbe
000001AC: EF000003    ;                 SVC     print_str
000001B0: E1A00005    ;                 MOV     R0, R5
000001B4: EF000004    ;                 SVC     print_no
000001B8: E24F002A    ;                 ADRL R0, on
000001BC: E2400C01    ; 
000001C0: EF000003    ;                 SVC     print_str
000001C4:             ; 
000001C4: E92D0052    ;                 STMFD SP!, {R1, R4, R6}         ;stack three parameters
000001C8: EB000006    ;                 BL printTheDate
000001CC:             ; 
000001CC:             ; 
000001CC:             ; ; }// end of printAgeHistory
000001CC:             ; end2
000001CC: E8BD0070    ;                 LDMFD SP!, {R4-R6}  ; callee saved registers
000001D0:             ; 
000001D0:             ; ;for part 1
000001D0:             ; ;replace the POP instructions given above with one LDMFD instruction
000001D0:             ;                 
000001D0: E8BD4000    ;                 POP{LR}                         ;pop LR
000001D4: E1A0F00E    ;                 MOV     PC, LR                  ;branch to caller
000001D8:             ; 
000001D8: 41 6E 6F 74 ; another         DEFB    "Another person",10,0
000001DC: 68 65 72 20 ; 
000001E0: 70 65 72 73 ; 
000001E4: 6F 6E 0A 00 ; 
000001E8:             ;                 ALIGN
000001E8:             ; 
000001E8:             ; printTheDate
000001E8: E92D4000    ;         PUSH {LR}                               ;push LR
000001EC: E92D000E    ;         STMFD SP!, {R1-R3}          ;callee saved
000001F0:             ; 
000001F0:             ;         ;load parameters from the stack
000001F0: E59D1018    ;         LDR R1, [SP, #(4 + 2) * 4]
000001F4: E59D2010    ;         LDR     R2, [SP, #(4 + 0) * 4]
000001F8: E59D3014    ;         LDR     R3, [SP, #(4 + 1) * 4]
000001FC:             ; 
000001FC: E1A00001    ;         MOV     R0, R1
00000200: EF000004    ;         SVC     print_no
00000204: E3A0002F    ;         MOV     R0, #'/'
00000208: EF000000    ;         SVC     print_char
0000020C: E1A00002    ;         MOV     R0, R2
00000210: EF000004    ;         SVC     print_no
00000214: E3A0002F    ;         MOV     R0, #'/'
00000218: EF000000    ;         SVC     print_char
0000021C: E1A00003    ;         MOV     R0, R3
00000220: EF000004    ;         SVC     print_no
00000224: E3A0000A    ;         MOV     R0, #cLF
00000228: EF000000    ;         SVC     print_char
0000022C:             ; 
0000022C: E8BD000E    ;         LDMFD SP!, {R1-R3}     ;restore callee saved
00000230: E49DF010    ;         LDR PC, [SP], #16          ;branch to caller and deallocate the parameters
00000234:             ; 
00000234:             ; ; def main():
00000234:             ; main
00000234: E59F40B8    ;         LDR     R4, =&12345678          ; Test value - not part of python compilation
00000238: E1A05004    ;         MOV     R5, R4                      ; See later if these registers corrupted
0000023C: E1A06004    ;         MOV     R6, R4
00000240:             ; 
00000240:             ; ; printAgeHistory(pDay, pMonth, 2000)
00000240: E51F2180    ;                 LDR     R2, pDay
00000244: E51F1180    ;                 LDR     R1, pMonth
00000248: E51F017C    ;                 LDR     R0, sYear
0000024C: E92D0007    ;                 STMFD SP!, {R0, R1, R2}                 ;stack three parameters
00000250:             ; ;for part 1
00000250:             ; ;modify the above code (6 lines) to replace the three PUSH instructions with one STMFD instruct
                      ; ion
00000250:             ; ;three parameters should be pushed to the stack with one STMFD instruction.
00000250:             ; 
00000250: EBFFFFA0    ;                 BL      printAgeHistory                 
00000254: E28DD00C    ;                 ADD SP, SP, #12                                 ; Deallocate three 32-bit varia
                      ; bles
00000258:             ; 
00000258:             ; ;for part 1
00000258:             ; ;Replace the three POP instructions mentioned above with a single instruction that doesn't invo
                      ; lve memory access.
00000258:             ; 
00000258:             ; ; print("Another person");
00000258: E24F0088    ;                 ADRL R0, another
0000025C: EF000003    ;                 SVC      print_str
00000260:             ; 
00000260:             ; ; printAgeHistory(13, 11, 2000)
00000260: E3A0200D    ;                 MOV     R2, #13
00000264: E3A0100B    ;                 MOV     R1, #11
00000268: E3A00E7D    ;                 MOV     R0, #2000
0000026C: E92D0007    ;                 STMFD SP!, {R0, R1, R2}                 ;stack three parameters
00000270:             ; 
00000270:             ; ;for part 1
00000270:             ; ;modify the above code (6 lines) to replace the three instructions (PUSH, STR and STR) with one
                      ;  STMFD instruction
00000270:             ; ;three parameters should be pushed to the stack with one STMFD instruction.
00000270:             ; 
00000270: EBFFFF98    ;                 BL      printAgeHistory                 
00000274: E28DD00C    ;                 ADD SP, SP, #12                                 ; Deallocate three 32-bit varia
                      ; bles
00000278:             ; 
00000278:             ; ;for part 1
00000278:             ; ;Replace the three POP instructions mentioned above with a single instruction that doesn't invo
                      ; lve memory access.
00000278:             ; 
00000278:             ;         ; Now check to see if register values intact (Not part of Java)
00000278: E59F0074    ;         LDR     R0, =&12345678          ; Test value
0000027C: E1540000    ;         CMP     R4, R0                          ; Did you preserve these registers?
00000280: 01550000    ;         CMPEQ   R5, R0                  ;
00000284: 01560000    ;         CMPEQ   R6, R0                  ;
00000288:             ; 
00000288: 128F0014    ;         ADRLNE  R0, whoops1             ; Oh dear!
0000028C: 1F000003    ;         SVCNE   print_str               ;
00000290:             ; 
00000290: E24F0F8B    ;         ADRL    R0, _stack              ; Have you balanced pushes & pops?
00000294: E15D0000    ;         CMP     SP, R0                      ;
00000298:             ; 
00000298: 128F002A    ;         ADRLNE  R0, whoops2             ; Oh no!!
0000029C: 1F000003    ;         SVCNE   print_str               ; End of test code
000002A0:             ; 
000002A0:             ; ; }// end of main
000002A0: EF000002    ;                 SVC     stop
000002A4:             ; 
000002A4: 0A 2A 2A 20 ; whoops1         DEFB    "\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
000002A8: 42 55 54 20 ; 
000002AC: 59 4F 55 20 ; 
000002B0: 43 4F 52 52 ; 
000002B4: 55 50 54 45 ; 
000002B8: 44 20 52 45 ; 
000002BC: 47 49 53 54 ; 
000002C0: 45 52 53 21 ; 
000002C4: 20 20 2A 2A ; 
000002C8: 0A 00       ; 
000002CA: 0A 2A 2A 20 ; whoops2         DEFB    "\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0
000002CE: 42 55 54 20 ; 
000002D2: 59 4F 55 52 ; 
000002D6: 20 53 54 41 ; 
000002DA: 43 4B 20 44 ; 
000002DE: 49 44 4E 27 ; 
000002E2: 54 20 42 41 ; 
000002E6: 4C 41 4E 43 ; 
000002EA: 45 21 20 20 ; 
000002EE: 2A 2A 0A 00 ; 
000002F2: 00 00       ; (padding)
000002F4: 12345678    ; Remaining literals

Symbol Table: Labels
: print_char                        00000000  Value
: stop                              00000002  Value
: print_str                         00000003  Value
: print_no                          00000004  Value
: cLF                               0000000A  Value
: _stack                            0000006C  Local -- ARM
: wasborn                           0000006C  Local -- ARM
: was                               00000085  Local -- ARM
: on                                00000096  Local -- ARM
: is                                0000009B  Local -- ARM
: today                             000000AB  Local -- ARM
: willbe                            000000B3  Local -- ARM
: pDay                              000000C8  Local -- ARM
: pMonth                            000000CC  Local -- ARM
: pYear                             000000D0  Local -- ARM
: sYear                             000000D4  Local -- ARM
: printAgeHistory                   000000D8  Local -- ARM
: loop1                             00000108  Local -- ARM
: innerloop1                        00000138  Local -- ARM
: end1                              0000016C  Local -- ARM
: else1                             000001A8  Local -- ARM
: end2                              000001CC  Local -- ARM
: another                           000001D8  Local -- ARM
: printTheDate                      000001E8  Local -- ARM
: main                              00000234  Local -- ARM
: whoops1                           000002A4  Local -- ARM
: whoops2                           000002CA  Local -- ARM
