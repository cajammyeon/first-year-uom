KMD
00000000:             ; ;by default it will branch to label 'part1'
00000000:             ; 
00000000: EA0000D1    ;         B part3 ; part1 or part2 or part3
00000004:             ; 
00000004:             ; 
00000004:             ; 
00000004: 00 00 00 00 ; buffer  DEFS 100,0
00000008: 00 00 00 00 ; 
0000000C: 00 00 00 00 ; 
00000010: 00 00 00 00 ; 
00000014: 00 00 00 00 ; 
00000018: 00 00 00 00 ; 
0000001C: 00 00 00 00 ; 
00000020: 00 00 00 00 ; 
00000024: 00 00 00 00 ; 
00000028: 00 00 00 00 ; 
0000002C: 00 00 00 00 ; 
00000030: 00 00 00 00 ; 
00000034: 00 00 00 00 ; 
00000038: 00 00 00 00 ; 
0000003C: 00 00 00 00 ; 
00000040: 00 00 00 00 ; 
00000044: 00 00 00 00 ; 
00000048: 00 00 00 00 ; 
0000004C: 00 00 00 00 ; 
00000050: 00 00 00 00 ; 
00000054: 00 00 00 00 ; 
00000058: 00 00 00 00 ; 
0000005C: 00 00 00 00 ; 
00000060: 00 00 00 00 ; 
00000064: 00 00 00 00 ; 
00000068:             ; 
00000068:             ; 
00000068: 20 3E 3E 20 ; is              DEFB    " >> is \0"
0000006C: 69 73 20 00 ; 
00000070:             ;         ALIGN
00000070: 54 68 65 20 ; strsize         DEFB    "The length of string >> \0 "
00000074: 6C 65 6E 67 ; 
00000078: 74 68 20 6F ; 
0000007C: 66 20 73 74 ; 
00000080: 72 69 6E 67 ; 
00000084: 20 3E 3E 20 ; 
00000088: 00 20       ; 
0000008C:             ;         ALIGN
0000008C:             ; 
0000008C: 73 65 76 65 ; s1      DEFB "seven\0"
00000090: 6E 00       ; 
00000094:             ;         ALIGN
00000094: 73 69 78 00 ; s2      DEFB "six\0"
00000098:             ;         ALIGN
00000098: 66 69 76 65 ; s3      DEFB "five\0"
0000009C: 00          ; 
000000A0:             ;         ALIGN
000000A0: 66 6F 75 72 ; s4      DEFB "four\0"
000000A4: 00          ; 
000000A8:             ;         ALIGN
000000A8: 74 68 72 65 ; s5      DEFB "three\0"
000000AC: 65 00       ; 
000000B0:             ;         ALIGN
000000B0: 74 77 6F 00 ; s6      DEFB "two\0"
000000B4:             ;         ALIGN
000000B4: 6F 6E 65 00 ; s7      DEFB "one\0"
000000B8:             ;         ALIGN
000000B8: 43 4F 4D 50 ; s8      DEFB "COMP15111 \0"
000000BC: 31 35 31 31 ; 
000000C0: 31 20 00    ; 
000000C4:             ;         ALIGN
000000C4: 46 75 6E 64 ; s9      DEFB "Fundamentals of Computer Architecture\0"
000000C8: 61 6D 65 6E ; 
000000CC: 74 61 6C 73 ; 
000000D0: 20 6F 66 20 ; 
000000D4: 43 6F 6D 70 ; 
000000D8: 75 74 65 72 ; 
000000DC: 20 41 72 63 ; 
000000E0: 68 69 74 65 ; 
000000E4: 63 74 75 72 ; 
000000E8: 65 00       ; 
000000EC:             ;         ALIGN
000000EC:             ; 
000000EC:             ; printstring
000000EC: E1A00001    ;         MOV  R0,R1
000000F0: EF000003    ;         SVC  3
000000F4: E3A0000A    ;         MOV  R0, #10
000000F8: EF000000    ;         SVC  0
000000FC: E1A0F00E    ;         MOV  PC, LR
00000100:             ; 
00000100:             ; 
00000100:             ; 
00000100:             ; ;************************** part 1 **************************
00000100:             ; stringLength
00000100:             ; 
00000100:             ; ; R2 must contain the length of the string.
00000100:             ; ;by default R2 contains integer value zero, you need to write a
00000100:             ; ;piece of assembly code to calculate the length of the string pointed by R1
00000100:             ; ;your code goes here
00000100: E1A02001    ;   MOV R2, R1           ;len = 0
00000104:             ; 
00000104:             ; loop1
00000104:             ; 
00000104: E4D23001    ;   LDRB R3, [R2], #1     ;R1 contains the address, R2 is the length
00000108: E3530000    ;   CMP R3, #0                     
0000010C: 1AFFFFFC    ;   BNE loop1                   
00000110: E0422001    ;   SUB R2, R2, R1
00000114: E2422001    ;   SUB R2, R2, #1
00000118:             ; 
00000118:             ; ;R2 must contain the length of the string
00000118:             ; ; don't remove these lines
00000118: E1A00002    ;   MOV  R0,R2
0000011C: EF000004    ;   SVC  4
00000120: E3A0000A    ;   MOV  R0, #10
00000124: EF000000    ;   SVC  0
00000128: E1A0F00E    ;   MOV  PC, LR
0000012C:             ; 
0000012C:             ; 
0000012C:             ; 
0000012C:             ; ;************************** part 2 **************************
0000012C:             ; printstringReverse
0000012C:             ; 
0000012C:             ; ;Your code goes here replacing the 2 lines given below
0000012C: E1A02001    ;   MOV  R2, R1
00000130:             ; 
00000130:             ; loop2
00000130:             ;   
00000130: E4D23001    ;   LDRB R3, [R2], #1    ; calculate the length
00000134: E3530000    ;   CMP R3, #0           ;         
00000138: 1AFFFFFC    ;   BNE loop2            ;       
0000013C: E0422001    ;   SUB R2, R2, R1       ;
00000140: E2422001    ;   SUB R2, R2, #1       ; end calculate length, R2 contains the length
00000144:             ; 
00000144:             ;   ; R2 now acts as pointer
00000144:             ; 
00000144:             ; loop3
00000144:             ; 
00000144: E7D10002    ;   LDRB R0, [R1, R2]    ; point to the end of the string
00000148: EF000000    ;   SVC 0                ; print the character
0000014C: E3520000    ;   CMP R2, #0
00000150: E2422001    ;   SUB R2, R2, #1
00000154: 1AFFFFFA    ;   BNE loop3
00000158:             ; 
00000158:             ; ; don't remove these lines
00000158: E3A0000A    ;         MOV  R0, #10    ; given - output end-of-line
0000015C: EF000000    ;         SVC  0          ; given
00000160: E1A0F00E    ;         MOV  PC, LR     ; given
00000164:             ; 
00000164:             ; ;************************** part 3 ***************************
00000164:             ; stringCopy
00000164:             ; 
00000164:             ; ;Your code goes here replacing the 2 lines given below
00000164:             ;   
00000164:             ;   ; R1 contains adress of s8
00000164:             ;   ; R2 contains address of s9
00000164:             ;   ; R3 contains address of buffer
00000164:             ;   ; R4 introduced as buffer pointer
00000164:             ; 
00000164:             ; loop4
00000164:             ; 
00000164: E4D14001    ;   LDRB R4, [R1], #1     ; load character into R4, increment R1
00000168: E4C34001    ;   STRB R4, [R3], #1     ; store R4 into buffer, increment R3
0000016C: E5514000    ;   LDRB R4, [R1]         ; load last character into R4 for comparison
00000170: E3540000    ;   CMP R4, #0            ; end for first string
00000174: 1AFFFFFA    ;   BNE loop4
00000178:             ; 
00000178:             ; loop5
00000178:             ; 
00000178: E4D24001    ;   LDRB R4, [R2], #1     ; load character into R4, increment R2
0000017C: E4C34001    ;   STRB R4, [R3], #1     ; store R4 into buffer, increment R3
00000180: E5524000    ;   LDRB R4, [R2]         ; load last character into R4 for comparison
00000184: E3540000    ;   CMP R4, #0            ; end for second string
00000188: 1AFFFFFA    ;   BNE loop5
0000018C:             ; 
0000018C:             ; ; don't remove this line
0000018C: E1A0F00E    ;   MOV  PC, LR   ; given
00000190:             ; 
00000190:             ; 
00000190:             ; 
00000190:             ; ;*********************** the various parts ********************
00000190:             ; part1
00000190: E24F1F4A    ;   ADR R1, strsize
00000194: E1A00001    ;   MOV  R0,R1
00000198: EF000003    ;   SVC  3
0000019C: E24F1F46    ;   ADR R1, s1
000001A0: E1A00001    ;   MOV  R0,R1
000001A4: EF000003    ;   SVC  3
000001A8: E24F2F52    ;   ADR R2, is
000001AC: E1A00002    ;   MOV  R0,R2
000001B0: EF000003    ;   SVC  3
000001B4: E24F1E13    ;   ADR R1, s1
000001B8: EBFFFFD0    ;   BL stringLength
000001BC:             ; 
000001BC:             ; 
000001BC: E24F1F55    ;   ADR R1, strsize
000001C0: E1A00001    ;   MOV  R0,R1
000001C4: EF000003    ;   SVC  3
000001C8: E24F1F4F    ;   ADR R1, s2
000001CC: E1A00001    ;   MOV  R0,R1
000001D0: EF000003    ;   SVC  3
000001D4: E24F2F5D    ;   ADR R2, is
000001D8: E1A00002    ;   MOV  R0,R2
000001DC: EF000003    ;   SVC  3
000001E0: EBFFFFC6    ;   BL stringLength
000001E4:             ; 
000001E4: E24F1F5F    ;   ADR R1, strsize
000001E8: E1A00001    ;   MOV  R0,R1
000001EC: EF000003    ;   SVC  3
000001F0: E24F1E16    ;   ADR R1, s3
000001F4: E1A00001    ;   MOV  R0,R1
000001F8: EF000003    ;   SVC  3
000001FC: E24F2F67    ;   ADR R2, is
00000200: E1A00002    ;   MOV  R0,R2
00000204: EF000003    ;   SVC  3
00000208: EBFFFFBC    ;   BL stringLength
0000020C:             ; 
0000020C: E24F1F69    ;   ADR R1, strsize
00000210: E1A00001    ;   MOV  R0,R1
00000214: EF000003    ;   SVC  3
00000218: E24F1D06    ;   ADR R1, s4
0000021C: E1A00001    ;   MOV  R0,R1
00000220: EF000003    ;   SVC  3
00000224: E24F2F71    ;   ADR R2, is
00000228: E1A00002    ;   MOV  R0,R2
0000022C: EF000003    ;   SVC  3
00000230: EBFFFFB2    ;   BL stringLength
00000234:             ; 
00000234: E24F1F73    ;   ADR R1, strsize
00000238: E1A00001    ;   MOV  R0,R1
0000023C: EF000003    ;   SVC  3
00000240: E24F1E1A    ;   ADR R1, s5
00000244: E1A00001    ;   MOV  R0,R1
00000248: EF000003    ;   SVC  3
0000024C: E24F2F7B    ;   ADR R2, is
00000250: E1A00002    ;   MOV  R0,R2
00000254: EF000003    ;   SVC  3
00000258: EBFFFFA8    ;   BL stringLength
0000025C:             ; 
0000025C: E24F1F7D    ;   ADR R1, strsize
00000260: E1A00001    ;   MOV  R0,R1
00000264: EF000003    ;   SVC  3
00000268: E24F1D07    ;   ADR R1, s6
0000026C: E1A00001    ;   MOV  R0,R1
00000270: EF000003    ;   SVC  3
00000274: E24F2F85    ;   ADR R2, is
00000278: E1A00002    ;   MOV  R0,R2
0000027C: EF000003    ;   SVC  3
00000280: EBFFFF9E    ;   BL stringLength
00000284:             ; 
00000284: E24F1F87    ;   ADR R1, strsize
00000288: E1A00001    ;   MOV  R0,R1
0000028C: EF000003    ;   SVC  3
00000290: E24F1F79    ;   ADR R1, s7
00000294: E1A00001    ;   MOV  R0,R1
00000298: EF000003    ;   SVC  3
0000029C: E24F2F8F    ;   ADR R2, is
000002A0: E1A00002    ;   MOV  R0,R2
000002A4: EF000003    ;   SVC  3
000002A8: EBFFFF94    ;   BL stringLength
000002AC:             ; 
000002AC: E24F1F91    ;   ADR R1, strsize
000002B0: E1A00001    ;   MOV  R0,R1
000002B4: EF000003    ;   SVC  3
000002B8: E24F1F82    ;   ADR R1, s8
000002BC: E1A00001    ;   MOV  R0,R1
000002C0: EF000003    ;   SVC  3
000002C4: E24F2F99    ;   ADR R2, is
000002C8: E1A00002    ;   MOV  R0,R2
000002CC: EF000003    ;   SVC  3
000002D0: EBFFFF8A    ;   BL stringLength
000002D4:             ; 
000002D4: E24F1F9B    ;   ADR R1, strsize
000002D8: E1A00001    ;   MOV  R0,R1
000002DC: EF000003    ;   SVC  3
000002E0: E24F1F89    ;   ADR R1, s9
000002E4: E1A00001    ;   MOV  R0,R1
000002E8: EF000003    ;   SVC  3
000002EC: E24F2FA3    ;   ADR R2, is
000002F0: E1A00002    ;   MOV  R0,R2
000002F4: EF000003    ;   SVC  3
000002F8: EBFFFF80    ;   BL stringLength
000002FC: EF000002    ;   SVC 2
00000300:             ; 
00000300:             ; 
00000300: E24F1F9F    ; part2   ADR R1, s1
00000304: EBFFFF88    ;   BL  printstringReverse
00000308: E24F1F9F    ;   ADR R1, s2
0000030C: EBFFFF86    ;   BL  printstringReverse
00000310: E24F1D0A    ;   ADR R1, s3
00000314: EBFFFF84    ;   BL  printstringReverse
00000318: E24F1D0A    ;   ADR R1, s4
0000031C: EBFFFF82    ;   BL  printstringReverse
00000320: E24F1D0A    ;   ADR R1, s5
00000324: EBFFFF80    ;   BL  printstringReverse
00000328: E24F1D0A    ;   ADR R1, s6
0000032C: EBFFFF7E    ;   BL  printstringReverse
00000330: E24F1FA1    ;   ADR R1, s7
00000334: EBFFFF7C    ;   BL  printstringReverse
00000338: E24F1FA2    ;   ADR R1, s8
0000033C: EBFFFF7A    ;   BL  printstringReverse
00000340: E24F1FA1    ;   ADR R1, s9
00000344: EBFFFF78    ;   BL  printstringReverse
00000348: EF000002    ;   SVC 2
0000034C:             ; 
0000034C:             ; 
0000034C: E24F1FA7    ; part3   ADR R1, s8
00000350: E24F2FA5    ;   ADR R2, s9
00000354: E24F3FD6    ;   ADR R3, buffer
00000358: EBFFFF81    ;   BL  stringCopy
0000035C: E24F1E36    ;   ADR R1, buffer
00000360: EBFFFF61    ;   BL printstring
00000364:             ; 
00000364: EF000002    ;   SVC 2
00000368:             ; 

Symbol Table: Labels
: buffer                            00000004  Local -- ARM
: is                                00000068  Local -- ARM
: strsize                           00000070  Local -- ARM
: s1                                0000008C  Local -- ARM
: s2                                00000094  Local -- ARM
: s3                                00000098  Local -- ARM
: s4                                000000A0  Local -- ARM
: s5                                000000A8  Local -- ARM
: s6                                000000B0  Local -- ARM
: s7                                000000B4  Local -- ARM
: s8                                000000B8  Local -- ARM
: s9                                000000C4  Local -- ARM
: printstring                       000000EC  Local -- ARM
: stringLength                      00000100  Local -- ARM
: loop1                             00000104  Local -- ARM
: printstringReverse                0000012C  Local -- ARM
: loop2                             00000130  Local -- ARM
: loop3                             00000144  Local -- ARM
: stringCopy                        00000164  Local -- ARM
: loop4                             00000164  Local -- ARM
: loop5                             00000178  Local -- ARM
: part1                             00000190  Local -- ARM
: part2                             00000300  Local -- ARM
: part3                             0000034C  Local -- ARM
