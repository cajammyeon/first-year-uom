KMD
00000000:             ; 
00000000: EA000015    ;         B main
00000004:             ; 
00000004: 4F 70 65 72 ; op1     DEFB    "Operand 1:  \0"
00000008: 61 6E 64 20 ; 
0000000C: 31 3A 20 20 ; 
00000010: 00          ; 
00000011: 4F 70 65 72 ; op2     DEFB    "Operand 2:  \0"
00000015: 61 6E 64 20 ; 
00000019: 32 3A 20 20 ; 
0000001D: 00          ; 
0000001E: 50 6C 65 61 ; op3 DEFB  "Please select your operation (+, -) : \0"
00000022: 73 65 20 73 ; 
00000026: 65 6C 65 63 ; 
0000002A: 74 20 79 6F ; 
0000002E: 75 72 20 6F ; 
00000032: 70 65 72 61 ; 
00000036: 74 69 6F 6E ; 
0000003A: 20 28 2B 2C ; 
0000003E: 20 2D 29 20 ; 
00000042: 3A 20 00    ; 
00000045: 52 65 73 75 ; op4 DEFB  "Result of Operation : \0"
00000049: 6C 74 20 6F ; 
0000004D: 66 20 4F 70 ; 
00000051: 65 72 61 74 ; 
00000055: 69 6F 6E 20 ; 
00000059: 3A 20 00    ; 
0000005C:             ; 
0000005C:             ;   ALIGN
0000005C:             ; 
0000005C:             ; plus   EQU 43
0000005C:             ; minus  EQU 45
0000005C:             ; return EQU 10
0000005C:             ; 
0000005C:             ; main
0000005C:             ; 
0000005C: E24F0060    ;   ADR   R0, op1    ; printf("Operand 1: ")
00000060: EF000003    ;   SVC 3
00000064: EF000005    ;   SVC   5                      ; input a digit to R0
00000068: E1A01000    ;   MOV R1, R0     ; store R0 into R1
0000006C:             ; 
0000006C: E24F0063    ;   ADR   R0, op2    ; printf("Operand 2: ")
00000070: EF000003    ;   SVC 3
00000074: EF000005    ;   SVC   5                      ; input a digit to R0
00000078: E1A02000    ;   MOV R2, R0     ; store R0 into R2
0000007C:             ; 
0000007C: E24F0066    ;         ADR R0, op3    ; printf("Please select your operation : ")
00000080: EF000003    ;         SVC 3
00000084: EF000001    ;   SVC 1          ; input to R0           
00000088: E1A03000    ;   MOV R3, R0     ; store R0 into R3
0000008C: EF000000    ;   SVC 0          ;  print the operation
00000090: E24F008E    ;   ADR R0, return ;  simulating return key
00000094: EF000000    ;   SVC 0
00000098:             ; 
00000098: E353002B    ;   CMP R3, #plus
0000009C: 0A000002    ;   BEQ plusfunction
000000A0: E353002D    ;   CMP R3, #minus
000000A4: 0A000005    ;   BEQ minusfunction
000000A8: EA000009    ;   B exitfunction
000000AC:             ; 
000000AC:             ; 
000000AC:             ; plusfunction
000000AC: E24F006F    ;   ADR R0, op4  ; printf("Result of operation : ")
000000B0: EF000003    ;   SVC 3
000000B4: E0810002    ;   ADD R0, R1, R2
000000B8: EF000004    ;   SVC 4       ; printf(operand 1 + operand 2)
000000BC: EA000004    ;   B exitfunction
000000C0:             ; 
000000C0:             ; minusfunction
000000C0: E24F0083    ;   ADR R0, op4  ; printf("Result of operation : ")
000000C4: EF000003    ;   SVC 3
000000C8: E0410002    ;   SUB R0, R1, R2
000000CC: EF000004    ;   SVC 4       ; printf(operand 1 - operand 2)
000000D0: EAFFFFFF    ;   B exitfunction
000000D4:             ; 
000000D4:             ; exitfunction
000000D4: EF000002    ;   SVC 2             ; stop the program
000000D8:             ; 

Symbol Table: Labels
: op1                               00000004  Local -- ARM
: op2                               00000011  Local -- ARM
: op3                               0000001E  Local -- ARM
: op4                               00000045  Local -- ARM
: plus                              0000002B  Value
: minus                             0000002D  Value
: return                            0000000A  Value
: main                              0000005C  Local -- ARM
: plusfunction                      000000AC  Local -- ARM
: minusfunction                     000000C0  Local -- ARM
: exitfunction                      000000D4  Local -- ARM
